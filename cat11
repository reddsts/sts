






//Detect Loop

import java.util.Scanner;

public class CycleDetection {
    static class ListNode {
        int val;
        ListNode next;

        ListNode(int x) {
            val = x;
            next = null;
        }
    }

    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false; // No cycle if the list is empty or has only one node
        }
        ListNode tortoise = head;
        ListNode hare = head;
        while (hare != null && hare.next != null) {
            tortoise = tortoise.next; // Tortoise moves one step
            hare = hare.next.next; // Hare moves two steps
            // If hare and tortoise meet, there's a cycle
            if (hare == tortoise) {
                return true;
            }
        }
        // If hare reaches the end of the list, no cycle exists
        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        CycleDetection cycleDetection = new CycleDetection();

        System.out.println("Enter the number of nodes:");
        int n = scanner.nextInt();

        System.out.println("Enter the values for the nodes:");
        ListNode head = null;
        ListNode tail = null;
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            if (head == null) {
                head = new ListNode(value);
                tail = head;
            } else {
                tail.next = new ListNode(value);
                tail = tail.next;
            }
        }

        System.out.println("Enter the index of the node where you want to create a cycle (-1 for no cycle):");
        int cycleIndex = scanner.nextInt();
        if (cycleIndex != -1) {
            ListNode current = head;
            ListNode cycleNode = null;
            int currentIndex = 0;
            while (current != null) {
                if (currentIndex == cycleIndex) {
                    cycleNode = current;
                }
                if (current.next == null && cycleIndex >= n) {
                    System.out.println("Invalid cycle index. Setting cycle to last node.");
                    cycleNode = current;
                }
                current = current.next;
                currentIndex++;
            }
            if (cycleNode != null) {
                tail.next = cycleNode;
            }
        }

        System.out.println("Does the list have a cycle? " + cycleDetection.hasCycle(head));
    }
}


//Bitonic
import java.util.Scanner;

class bitonicdll {
    static class Node {
        int data;
        Node next;
        Node prev;
    }

    static Node sort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node front = head;
        Node last = head;
        Node res = new Node();
        Node resEnd = res;
        Node next;

        while (last.next != null) {
            last = last.next;
        }

        while (front != last) {
            if (last.data <= front.data) {
                resEnd.next = last;
                next = last.prev;
                last.prev.next = null;
                last.prev = resEnd;
                last = next;
                resEnd = resEnd.next;
            } else {
            }
        }

        resEnd.next = front;
        next = front.next;
        front.next = null;
        front.prev = resEnd;
        front = next;
        resEnd = resEnd.next;

        resEnd.next = front;
        front.prev = resEnd;

        return res.next;
    }

    static Node push(Node head_ref, int new_data) {
        Node new_node = new Node();
        new_node.data = new_data;
        new_node.prev = null;
        new_node.next = (head_ref);
        if ((head_ref) != null)
            (head_ref).prev = new_node;
        (head_ref) = new_node;
        return head_ref;
    }

    static void printList(Node head) {
        if (head == null)
            System.out.print("Doubly Linked list empty");
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        Node head = null;

        System.out.println("Enter the number of nodes:");
        int n = scanner.nextInt();

        System.out.println("Enter the values for the nodes:");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            head = push(head, value);
        }

        System.out.println("Original Doubly linked list:");
        printList(head);

        head = sort(head);
        System.out.println("\nDoubly linked list after sorting:");
        printList(head);
    }
}


//Segregate even and odd elements
import java.util.Scanner;

public class Segregate {
    Node head;

    class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    public void segregateEvenOdd() {
        Node evenStart = null;
        Node evenEnd = null;
        Node oddStart = null;
        Node oddEnd = null;
        Node currentNode = head;
        while (currentNode != null) {
            int element = currentNode.data;
            if (element % 2 == 0) {
                if (evenStart == null) {
                    evenStart = currentNode;
                    evenEnd = evenStart;
                } else {
                    evenEnd.next = currentNode;
                    evenEnd = evenEnd.next;
                }
            } else {
                if (oddStart == null) {
                    oddStart = currentNode;
                    oddEnd = oddStart;
                } else {
                    oddEnd.next = currentNode;
                    oddEnd = oddEnd.next;
                }
            }
            currentNode = currentNode.next;
        }
        if (oddStart == null || evenStart == null) {
            return;
        }
        evenEnd.next = oddStart;
        oddEnd.next = null;
        head = evenStart;
    }

    void push(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

    void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        Segregate llist = new Segregate();

        System.out.println("Enter the number of nodes:");
        int n = scanner.nextInt();

        System.out.println("Enter the values for the nodes:");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            llist.push(value);
        }

        System.out.println("Original Linked List:");
        llist.printList();

        llist.segregateEvenOdd();
        System.out.println("Modified Linked List:");
        llist.printList();
    }
}


//Merge sort
import java.util.Scanner;

class mergesortdll {
    static class Node {
        int data;
        Node prev;
        Node next;

        public Node(int data) {
            this.data = data;
        }
    }

    static Node head, tail = null;

    public static Node addNode(int item) {
        Node newNode = new Node(item);
        if (head == null) {
            head = tail = newNode;
            head.prev = null;
            tail.next = null;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
            tail.next = null;
        }
        return head;
    }

    static void print(Node node) {
        Node temp = node;
        while (node != null) {
            System.out.print(node.data + " ");
            temp = node;
            node = node.next;
        }
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
    }

    static Node split(Node head) {
        Node fast = head, slow = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        Node temp = slow.next;
        slow.next.prev = null;
        slow.next = null;
        return temp;
    }

    static Node mergeSort(Node node) {
        if (node == null || node.next == null) {
            return node;
        }
        Node second = split(node);
        node = mergeSort(node);
        second = mergeSort(second);
        return merge(node, second);
    }

    static Node merge(Node first, Node second) {
        if (first == null) {
            return second;
        }
        if (second == null) {
            return first;
        }
        if (first.data < second.data) {
            first.next = merge(first.next, second);
            first.next.prev = first;
            return first;
        } else {
            second.next = merge(first, second.next);
            second.next.prev = second;
            return second;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of nodes:");
        int n = scanner.nextInt();
        System.out.println("Enter the values for the nodes:");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            head = addNode(value);
        }
        Node node = mergeSort(head);
        System.out.println("Linked list after sorting:");
        print(node);
    }
}

