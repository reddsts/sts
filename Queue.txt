//Queue

//Implement Stack using queues Lifo

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main{
    static Queue<Integer> q1 = new LinkedList<>();
    static Queue<Integer> q2 = new LinkedList<>();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            int k = sc.nextInt();
            if (k == 1) {
                int in = sc.nextInt();
                push(in);
            }

            if (k == 3) {
                System.out.println("Top element: " + peek());

            }
            if (k == 2) {
                System.out.println("Pop: " + pop());

            }
            if (k == 4) {

                System.out.println("Is empty: " + isEmpty());
            }
            if (k == -1) {
                break;
            }
        }

    }

    static void push(int n) {
        q2.offer(n);
        while (!q1.isEmpty()) {
            q2.offer(q1.poll());
        }
        Queue<Integer> temp = q1;
        q1 = q2;
        q2 = temp;
    }

    static int pop() {
       if(q1.isEmpty())
        {
            return -1;
        }
        return q1.poll();
    }

    static int peek() {
        if(q1.isEmpty())
        {
            return -1;a
        }
        return q1.peek();
    }

    static boolean isEmpty() {
        return q1.isEmpty();
    }

}


//Implement queue using Stacks

import java.util.Stack;
        import java.util.Scanner;

class Main {
    static class MyQueue {
        private Stack<Integer> s1;
        private Stack<Integer> s2;

        public MyQueue() {
            s1 = new Stack<>();
            s2 = new Stack<>();
        }

        public void enqueue(int x) {
            while (!s1.isEmpty()) {
                s2.push(s1.pop());
            }
            s1.push(x);
            while (!s2.isEmpty()) {
                s1.push(s2.pop());
            }
        }

        public int dequeue() {
            return s1.pop();
        }

        public int peek() {
            return s1.peek();
        }

        public boolean empty() {
            return s1.isEmpty();
        }
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        MyQueue q = new MyQueue();
        sc.nextLine();
        for (int i = 0; i < n; i++) {
            int x = sc.nextInt();
            q.enqueue(x);
        }
        int m = sc.nextInt();
        for (int j = 0; j < m; j++) {
            q.dequeue();
        }
        System.out.println("Queue elements are:");
        while (!q.empty()) {
            System.out.print(q.dequeue()+ " ");
        }
    }
}