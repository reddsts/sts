
















//Stack 

//Longest valid parenthesis  Stack 
import java.util.*;
class Main{
  public static void main(String[] args){
	Scanner SC = new Scanner(System.in);
    int max = 0;
    Stack<Integer> stack = new Stack<>();
    String S1 = SC.next();
    stack.push(-1);
    
    for(int i=0; i<S1.length(); i++){
      char ch1 = S1.charAt(i);
      
      if(ch1 == '('){
		stack.push(i);
      }else{
		if(!stack.isEmpty()){
          stack.pop();
          if(!stack.isEmpty()){
            max = Math.max(max, i-stack.peek());
          }else{
            stack.push(i);
          }
        }
      }
      
    }
    System.out.println(max);
  
    }
}


//Infix to Postfix conversion Stack 

import java.util.Scanner;
import java.util.Stack;

public class Main {
    static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    static String infixToPostfix(String expression) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);

            if (Character.isLetterOrDigit(c)) {
                result.append(c);
            }
            else if (c == '(') {
                stack.push(c);
            }
            else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop();
            }
            else {
                while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                    result.append(stack.pop());
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String infix = sc.nextLine();
        String postfix = infixToPostfix(infix);
        System.out.println(postfix);
    }
}


//Evaluate Postfix 
import java.util.Stack;
import java.util.Scanner;
public class Main {
    static int evaluatePostfix(String exp)
    {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < exp.length(); i++) {
            char c = exp.charAt(i);
            
            if (Character.isDigit(c))
                stack.push(c - '0');
            else {
                int val1 = stack.pop();
                int val2 = stack.pop();

                switch (c) {
                    case '+':
                        stack.push(val2 + val1);
                        break;
                    case '-':
                        stack.push(val2 - val1);
                        break;
                    case '/':
                        stack.push(val2 / val1);
                        break;
                    case '*':
                        stack.push(val2 * val1);
                        break;
                }
            }
        }
        return stack.pop();
    }

    public static void main(String[] args)
    {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      sc.nextLine();
      for(int i=0;i<n;i++){
      String str = sc.nextLine();
        System.out.println(evaluatePostfix(str));
      }
    }
}

//Basic Caculator stack 

import java.util.Stack;
import java.util.*;
public class Main {
    public static int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int result = 0;
        int num = 0;
        int sign = 1; 
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            if (Character.isDigit(c)) {
                num = num * 10 + (c - '0'); 
            } else if (c == '+') {
                result += sign * num; 
                num = 0; 
                sign = 1;
            } else if (c == '-') {
                result += sign * num;
                num = 0;
                sign = -1; 
            } else if (c == '(') {
                stack.push(result); 
                stack.push(sign); 
                result = 0; 
                sign = 1; 
            } else if (c == ')') {
                result += sign * num; 
                num = 0; 
                result *= stack.pop(); 
                result += stack.pop(); 
            }
        }
        
        
        result += sign * num;
        
        return result;
    }

    public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      
        String input = sc.nextLine();
        int output = calculate(input);
        System.out.println(output); 
    }
}
